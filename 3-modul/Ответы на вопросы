1. Функция- блок кода, организован в конструкцию, отвечающую за выполнение логику над данными
2. Функции предназначенны, что бы в них описывать логики обработки данных, к которым можно обращаться в нужный момент, что бы не расписвать каждый раз по новому логику
3. Чистые функции с одним входом возвращают всегда один результат, не зависят от внешнего окружения, не изменяют состояние внешнего окружения. Их легко теститровать, логика их действия понятная.
4. Стрелочные функции не имеют имен, область this у них внещняя, они не имеют своей this Области видимости.
5. Function declaration(декларирование) - создаются интерпритатором до выполнения кода, можно обращаться к ней до ее фактического объявления в коде. Function expression(функциональное выражение) создаются в момент чтения е коде, к ней можно обращаться только после ее фактического создания в коде.
Способ написания создания 1-й function f_name {to_do}; 2-й var f_name  = function() {to-do}
6. Язык программирования имеет функции первого класса, они трактуются как объекты, то есть могут быть переданы другим функциям и их можно вернуть из функций. Так же их можно присваивать переменным(function expression)

Способы объявления функций: 1-й f_name {to_do}; 2-й var f_name  = function() {to-do}
Способы вызова: fname(с параметрами), fname(без параметров) - если параметры есть, то они будут undufinite, что не вызовет ошибки.
Параметры:  параметры по умолчанию (default parameters) и оставшиеся параметры (rest parameters). f_name(def_par(массив неопределенных аргументов), rest_par = 1(массив аргументов с заданным значением по умолчаию))
            arguments функции является псевдо-массивом. Внутри функции Вы можете ссылаться к аргументам следующим образом:
                arguments[i]
                где i — это порядковый номер аргумента, отсчитывающийся с 0. К первому аргументу, переданному функции, обращаются так arguments[0]. А получить количество всех аргументов — arguments.length.
Про return: При вызове оператора return в функции её выполнение прекращается. Указанное значение возвращается в место вызова функции(может ничего не указываться).

Магическое число, или сигнатура, — целочисленная или текстовая константа, используемая для однозначной идентификации ресурса или данных.
Оно не несёт никакого смысла и может вызвать недоумение, встретившись в коде программы без соответствующего контекста или комментария, при этом попытка изменить его на другое, даже близкое по значению, может привести к абсолютно непредсказуемым последствиям.
Их можно инициализироанть как константы и задать имя, понятно опысывающее их значаение, следовательно станет понятно их пременение.
1 let planetName = 'Eart';
2 let currentUserName = 'Nikita';

Рекурсия может привести к ошибкам stack frame errors, когда предел стека уже достигнут, а базовое условие ещё не выполнено.
Рекурсивное выражение короче, если нам надо выполнять логику в цикле, то можно заменить это на вызов функции саой себя, но надо задать выражения завершения вызова
Например при обходе вложенных каталогов, когда при этом у каждого имеется ряд своих отдельных переменных использовать легче будет рекурсию. Она в данном случае будет удобнее, потому что обход одного каталога совсем не зависит от результатов обхода другого соседнего каталога, и они могут работать параллельно, независимо друг от друга.